var readline = require('readline');
var rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout,
    terminal: false
});

function _null(e) {
    return (Array.isArray(e) && e.length === 0) && 't' || [];
}

function each(l, f) {
    if(_null(l) !== 't') {
        if(l.length === 3) {
            f(l[0], true);
            each(l.slice(1), f);
        } else {
            f(l[0]);
            each(l[1], f);
        }
    } else {
        f(l, true);
    }
}

function bnull(args) {
    return _null(args[0]);
}

function batom(args) {
    var e = args[0];
    return (typeof e === 'string' ||
            typeof e === 'number' ||
            _null(e) === 't') && 't' || [];
}

function bdivide(args) {
    var quotient = args[0];

    each(args[1], function (e, last) {
        if(_null(e) !== 't') {
            quotient /= e;
        }
    });

    return quotient;
}

function btimes(args) {
    var product = args[0];

    each(args[1], function (e, last) {
        if(_null(e) !== 't') {
            product *= e;
        }
    });

    return product;
}

function bminus(args) {
    var difference = args[0];

    each(args[1], function (e, last) {
        if(_null(e) !== 't') {
            difference -= e;
        }
    });

    return difference;
}

function bplus(args) {
    var sum = args[0];

    each(args[1], function (e, last) {
        if(_null(e) !== 't') {
            sum += e;
        }
    });

    return sum;
}

function bcar (args) {
    var x = args[0];
    try {
        return x[0];
    } catch (e) {
        return [];
    }
}

function bcdr (args) {
    var x = args[0];
    try {
        return x[1];
    } catch(e) {
        return [];
    }
}

function _cons(x, y) {
    return [x, y];
}

function bcons (args) {
    var car = args[0];
    var cdr = args[1][0];
    return [car, cdr];
}

function bprogn (args) {
    return _progn(args);
}

function _progn (args) {
    var result;
    while(args.length > 0) {
        result = _eval(args[0]);
        args = args[1];
    }
    
    return result;
}

function evlambda (fun, args) {
    var vars = fun[1][0];
    var saved = {}
    // save variables

    try {
        var flag;
        each(vars, function (e) {
            if(!flag) {
	        if(e !== '&rest' && e !== '&body' && env[e] !== undefined) {
	            saved[e] = env[e];
	        }
	        if(!Array.isArray(args[0]) && args[0].values !== undefined) {
	            env[e] = args[0].values[0];
	        } else {
	            if(e === '&rest' || e === '&body') {
                        flag = true;
                        return;
	            } else
		        env[e] = args[0];
	        }
                args = args[1];
            } else {
		env[e] = args;
                throw new Exception(); // early exit
            }
        });
    } catch (e) { }
    
    var result = _progn(fun[1][1]);

    each(vars, function (e) {
        delete env[e];
	if(saved[e] !== undefined) {
	    env[e] = saved[e];
	}
    });
    
    return result;
}

function reverse(l) {
    var result = [];
    each(l, function (e, last) {
        if(last) {
            if(_null(e) !== 't') {
                if(_null(result) !== 't') {
                    var result2 = result;
                    while(_null(result2[1]) !== 't')
                        result2 = result2[1];
                    result2[1] = e;
                } else {
                    result = e;
                }
            }
        } else {
            result = [e, result];
        }
    });
    return result;
}

function evlis(l) {
    var result = []
    each(l, function (x) {
	var tmp = _eval(x);
	if(!Array.isArray(tmp) && tmp !== undefined && tmp.values !== undefined) {
	    tmp = tmp.values[0];
	}
	result = [tmp, result]
    });
    return reverse(result);
}

function bapply(args) {
    var fun = args[0];
    var args = args[1][0];
    return _apply(fun, args);
}

function _apply(fun, args) {
    if(typeof fun === "string") {
	var f = fenv[fun];
        /* This allows removal of funcall.  If function is not found
         * in the function environment, it is then looked up in the
         * normal environment.  Might reduce confusion for new
         * users? */
        if(f === undefined) {
            f = env[fun];
        }
        if(f)
            fun = f;
    } 

    if(Array.isArray(fun) && fun[0] === 'macro') {
        var x = evlambda(fun, args);
	return _eval(x);
    } else {
	var args = evlis(args);
	if(typeof fun === "function") {
	    return fun(args);
	} else if(Array.isArray(fun) && fun[0] === 'lambda') {
            return evlambda(fun, args);
	} else {
            throw new Error("undefined function: " + fun);
            return fun;
	}
    }
	
    throw new Error("apply: " + fun + ": " + args);
}

function bme(args) {
    var fun = args[0][0];
    var args = args[0][1];

    return evlambda(fenv[fun], args);
}

function bset(args) {
    var v = args[0];
    var expr = args[1][0];

    if(typeof v === "string") {
	return env[v] = expr;
    } else
	throw new Error("attempt to set non-symbol value: " + v);
}

function benv () {
    var retval = [];
    for(i in env) {
        retval = _cons(_cons(i, env[i]), retval);
    }
    return reverse(retval);
}

function bfenv () {
    var retval = [];
    for(i in fenv) {
        retval = _cons(_cons(i, fenv[i]), retval);
    }
    return reverse(retval);
}

function bprint(args) {
    var expr = args;
    if(!Array.isArray(expr) && expr != undefined && expr.values !== undefined) {
        each(expr.values, function (e, last) {
            if(!last)
	        console.log(e);
	});
    } else {
	console.log(expr);
    }
}

function bsetf(args) {
    var type = args[0][0]
    var value = _eval(args[1][0]);

    switch(type) {
    case 'symbol-function': {
        var place = args[0][1][0];
	return fenv[place] = value;
    }
    default: {
        var place = args[0];
        return env[place[0]] = value;
    }
    }
}

/* TODO: decide if want to remove */
function bcall(args) {
    var fun = args[0];
    var args = args[1];

    if(typeof fun === 'string')
        fun = env[fun];

    return _apply(fun, args);
}

function bvalues(args) {
    return { 'values': args };
}

function bbind(exprs) {
    var args = exprs[0];
    var values = _eval(exprs[1][0]);
    var body = exprs[1][1];

    return _apply(blambda([args, body]), values.values);
}

function bdefmacro(expr) {
    var name = expr[0];
    var args = expr[1][0];
    var body = expr[1][1];
    
    var macro = [ 'macro', [ args, body, []]];
    return fenv[name] = macro;
}

function blambda (expr) {
    var args = expr[0];
    var body = expr[1];
    var lambda = [ 'lambda', [ args, body, []]];
    return lambda;
}

/* FUCK THIS IS HAIRY */
function bqquote(arg) {
    var result = [], dotted = false;
    if(Array.isArray(arg) && (arg[0] !== 'unquote' && arg[0] !== 'unquote-splice')) {
        each(arg, function(e, last) {
	    if(Array.isArray(e) && e[0] === 'unquote') {
	        result = [_eval(e[1][0]), result];
	    } else if(Array.isArray(e) && e[0] === 'unquote-splice') {
                var e2 = reverse(_eval(e[1][0]));
                var e3 = e2;
                while(_null(e3[1]) !== 't')
                    e3 = e3[1];
                e3[1] = result;
                result = e2;
	    } else if(e && e.length) {
	        result = [bqquote(e), result];
	    } else {
                if(last && _null(e) !== 't') {
                    if(result.length) {
                        var result2 = result;
                        while(_null(result2[1]) !== 't')
                            result2 = result2[1];
                        result2[1] = e;
                    } else 
                        result = e;
                    dotted = true;
                } else {
                    result = [e, result];
                }
            }
        });


        if(_null(result[0]) === 't' && dotted) {
            return result[1];
        } else if (_null(result[0]) === 't') {
            return reverse(result[1]);
        }  else
            return result;
    } else if(arg[0] === 'unquote') {
        return _eval(arg[1][0]);
    } else if(arg[0] === 'unquote-splice') {
        return _eval(arg[1][0]);
    } else
        return arg;
}

function beval(args) {
    return _eval(args);
}

function _eval(expr) {
    if(Array.isArray(expr)) {
        if(expr.length === 0) {
            return []; // nil
        }
	var car = expr[0];
	var cdr = expr[1];
	switch(car) {
	case 'qquote':
	    return bqquote(cdr[0]);
	case 'lambda':
	    return blambda(cdr);
	case 'setf':
	    return bsetf(cdr);
	case 'values':
	    return bvalues(cdr);
	case 'bind':
	    return bbind(cdr);
	case 'symbol-function':
	    return fenv[_eval(cdr[0])];
	case 'defmacro':
	    return bdefmacro(cdr);
        case 'progn':
            return bprogn(cdr);
        case 'me':
            return bme(cdr);
	default:
	    return _apply(car, cdr);
	}
    } else if(typeof expr === "number") {
        return expr;
    } else if(typeof expr === "string") {
        var v = env[expr];
        if(v === undefined)
            v = fenv[expr]
	if(v === undefined) {
	    throw new Error("undefined symbol or function: " + expr);
	}
	return v;
    } else {
	return expr;
    }
    
    throw new Error("eval error:" + expr);
}

var fenv = {
    'atom': batom,
    'null': bnull,
    'set': bset,
    'car': bcar,
    'cdr': bcdr,
    'cons': bcons,
    'eval': beval,
    '+': bplus,
    '-': bminus,
    '*': btimes,
    '/': bdivide,
    'apply': bapply,
    'call': bcall,
    'env': benv,
    'fenv': bfenv
};


var env = {
    't': 't'
};

function isNumberThing(c,i, l) {
    return c === '0' ||
	c === '1' ||
	c === '2' ||
	c === '3' ||
	c === '4' ||
	c === '5' ||
	c === '6' ||
	c === '7' ||
	c === '8' ||
	c === '9' ||
	(c === '-' && i === 0 && l > 1) ||
	(c === '+' && i === 0 && l > 1) ||
	c === '.'
}

function readFromString(string) {
    if(!string.length) return;
    function terminator(c) {
	return c === undefined ||
	    c === ' ' ||
	    c === '\n' ||
	    c === '\r' ||
	    c === '(' ||
	    c === ')';
    }

    function readThing (string) {
	var number = "";
	var isNumber = true;
        var i = 0;
	while(!terminator(string[0])) {
	    isNumber &= isNumberThing(string[0], i);
	    number += string[0];
	    string.shift();
            i++;
	}
        if(number[0] === '+' || number[0] === '-' && number.length === 1) {
            isNumber = false;
        }

	if(isNumber)
	    return parseFloat(number);
	else
	    return number;
    }

    function readSexpr(string) {
	while(string[0] != undefined) {
	    var c = string.shift();
	    switch(c) {
	    case ' ':
	    case '\n':
	    case '\t':
		continue;

	    case '`':
		return [ 'qquote', [ readSexpr(string)] ];
                
	    case ',':
		c = string.shift();
		if(c == '@') {
                    var e = readSexpr(string);
                    if (batom(e))
                        e = [ e, []];
		    return [ 'unquote-splice', e ];
		} else {
		    string.unshift(c);
                    var e = readSexpr(string);
                    if (batom(e))
                        e = [ e, []];
		    return [ 'unquote', e ];
		}

            case '.':
                return undefined;

	    case '(': {
		var result = [];
                var elt, c;

                do {
                    elt = readSexpr(string);

                    if(elt === undefined) {
                        var elt2 = readSexpr(string);
                        var elt3 = readSexpr(string);
                        if(elt3 !== null) {
                            throw new Error("dot at wrong place in list!");
                        }
                        var result2 = result;
                        var result3 = result2;
                        while(_null(result2[1]) !== 't')
                            result2 = result2[1];
                        result2[1] = elt2;
                        return result3;
                    } else {
                        if(elt)
                            result = [ elt, result ];
                    }
                } while(elt);
                
		return reverse(result);
	    }

	    case ')':
		return null;

	    default:
		string.unshift(c); 
		return readThing(string);
	    }
	}

	throw new Error("unterminated sexpr.");
    }

    return readSexpr(string.split(''));
}

rl.on('line', function(line) {
    try {
	bprint(beval(readFromString(line)));
    } catch(e) {
	console.error(e.stack);
	benv();
	bfenv();
    }
})

if(module !== undefined) {
    module.exports.readFromString = readFromString;
    module.exports.eval = _eval;
}
